parserCLN = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { prefix: peg$parseprefix },
        peg$startRuleFunction  = peg$parseprefix,

        peg$c0 = function(s) { 

        var resultats = "";

        resultats += "SELECT * WHERE {";
        for(i in s)
        {
          if(i == 0) { resultats += "{"; } else { resultats += "union {";}
          resultats += concat_all_request( s, i) + "}";
        }
        resultats += "}";
        //"}" parce qu'il y a un raccourci fait qui v√©rifie le nombre d'accolades ouvertes qui fait bug


        return "prefix : <http://liris.cnrs.fr/silex/2009/ktbs#> \n prefix ns1: <http://liris.cnrs.fr/silex/2011/simple-trace-model/> \n prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n prefix xml: <http://www.w3.org/XML/1998/namespace> \n prefix xsd: <http://www.w3.org/2001/XMLSchema#> \n\n prefix base: <http://liris.cnrs.fr/silex/2011/simple-trace-model/> \n prefix model: "+ trace_modelURI +"\n\n" + resultats; 



        return  "prefix : <http://liris.cnrs.fr/silex/2009/ktbs#> \n prefix ns1: <http://liris.cnrs.fr/silex/2011/simple-trace-model/> \n prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n prefix xml: <http://www.w3.org/XML/1998/namespace> \n prefix xsd: <http://www.w3.org/2001/XMLSchema#> \n\n prefix base: <http://liris.cnrs.fr/silex/2011/simple-trace-model/> \n prefix model: "+ trace_modelURI +"\n\n" + s.join(""); },
        peg$c1 = peg$FAILED,
        peg$c2 = [],
        peg$c3 = function(res, res2) {
         temp = new Array(res);
         for(i in res2[0]){ temp.push(res2[0][i])}
         return temp;

        },
        peg$c4 = function(res) { return res },
        peg$c5 = null,
        peg$c6 = function(ac, n) { id_req++; 

        //Ce que je retourne actuellement
        //return ac;
        //Ce qu'il faut retourner pour utiliser avec la fonction
        return [ "id_ref"+id_req, n, ac[0], ac[1]];

        },
        peg$c7 = "que",
        peg$c8 = { type: "literal", value: "que", description: "\"que\"" },
        peg$c9 = "je",
        peg$c10 = { type: "literal", value: "je", description: "\"je\"" },
        peg$c11 = "nomme",
        peg$c12 = { type: "literal", value: "nomme", description: "\"nomme\"" },
        peg$c13 = function(n) { return n.join(""); },
        peg$c14 = "cherche",
        peg$c15 = { type: "literal", value: "cherche", description: "\"cherche\"" },
        peg$c16 = "\xE0",
        peg$c17 = { type: "literal", value: "\xE0", description: "\"\\xE0\"" },
        peg$c18 = "veux",
        peg$c19 = { type: "literal", value: "veux", description: "\"veux\"" },
        peg$c20 = function() { return "";},
        peg$c21 = "soit",
        peg$c22 = { type: "literal", value: "Soit", description: "\"Soit\"" },
        peg$c23 = { type: "literal", value: "Je", description: "\"Je\"" },
        peg$c24 = function(n) { return n.join("");},
        peg$c25 = "parmi",
        peg$c26 = { type: "literal", value: "Parmi", description: "\"Parmi\"" },
        peg$c27 = function(ref) {return ref},
        peg$c28 = function(res) { return res;},
        peg$c29 = function(res) { return res; },
        peg$c30 = "r\xE9cup\xE9rer",
        peg$c31 = { type: "literal", value: "r\xE9cup\xE9rer", description: "\"r\\xE9cup\\xE9rer\"" },
        peg$c32 = function(obj) { return obj; },
        peg$c33 = "compter",
        peg$c34 = { type: "literal", value: "compter", description: "\"compter\"" },
        peg$c35 = "le",
        peg$c36 = { type: "literal", value: "le", description: "\"le\"" },
        peg$c37 = "nombre",
        peg$c38 = { type: "literal", value: "nombre", description: "\"nombre\"" },
        peg$c39 = function(obj) { id_obj++; return ["SELECT (COUNT ( distinct ?sobs"+ old_id_obj +" ) AS ?num_sobs"+ old_id_obj + ") \nWHERE \n "+ obj[0], obj[1] ];},
        peg$c40 = function(res) { id_obj++; return [ "SELECT DISTINCT ?sobs"+ old_id_obj +" ?pobs"+old_id_obj +" ?oobs"+old_id_obj +" \nWHERE \n "+ res[0] , res[1] ];},
        peg$c41 = function(res) { id_obj++; return "SELECT DISTINCT ?oobs"+old_id_obj +" \nWHERE \n "+ res;},
        peg$c42 = "tout",
        peg$c43 = { type: "literal", value: "tout", description: "\"tout\"" },
        peg$c44 = "les",
        peg$c45 = { type: "literal", value: "les", description: "\"les\"" },
        peg$c46 = "obsels",
        peg$c47 = { type: "literal", value: "obsels", description: "\"obsels\"" },
        peg$c48 = function() { return ["{ \n ?sobs"+ id_obj +" ?pobs"+id_obj +" ?oobs"+id_obj +" .\n ?sobs"+ id_obj +" :hasEnd ?dateEndobs"+ id_obj +" .\n ?sobs"+ id_obj +" :hasBegin ?dateBeginobs"+ id_obj +" .\n }", null, null]; },
        peg$c49 = "l'",
        peg$c50 = { type: "literal", value: "l'", description: "\"l'\"" },
        peg$c51 = "obsel",
        peg$c52 = { type: "literal", value: "obsel", description: "\"obsel\"" },
        peg$c53 = function() { return "\none_obsel cond reached"},
        peg$c54 = "d'",
        peg$c55 = { type: "literal", value: "d'", description: "\"d'\"" },
        peg$c56 = "d",
        peg$c57 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c58 = /^[sS]/,
        peg$c59 = { type: "class", value: "[sS]", description: "[sS]" },
        peg$c60 = function(cond) {  return cond;},
        peg$c61 = function() { 

        old_id_obj = id_obj;
        id_obj+= act_requete+1;
        act_requete = 0;

         return "{ \n ?sobs"+ old_id_obj +" ?pobs"+old_id_obj +" ?oobs"+old_id_obj +" .\n ?sobs"+ old_id_obj +" :hasEnd ?dateEndobs"+ old_id_obj +" .\n ?sobs"+ old_id_obj +" :hasBegin ?dateBeginobs"+ old_id_obj +" .\n }";},
        peg$c62 = "un",
        peg$c63 = { type: "literal", value: "un", description: "\"un\"" },
        peg$c64 = "l",
        peg$c65 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c66 = function() { act_requete++; return "?sobs"+(id_obj+act_requete); },
        peg$c67 = function() { act_requete++; return "?sobs"+act_requete; },
        peg$c68 = function(c1, c2, c3) {

        var condition = " "+c1[0]+ " \n";
        var dependances = [];

        if( c1[1] != null) { dependances.push( c1[1] ); }

        for( w in c2)
        {
          if(c2[w][0] != null){ condition += c2[w][0] + "\n";} 
          if(c2[w][1] != null){ dependances.push(c2[w][1]); }
        }
        for( u in c3)
        {
          if(c3[u][0] != null){ condition += c3[u][0] + "\n";} 
          if(c3[u][1] != null){ dependances.push(c3[w][1]); }
        }

        old_id_obj = id_obj;
        id_obj+= act_requete+1;
        act_requete = 0;

        if(dependances.length == 0) { dependances = null;}

        return [ "{ \n ?sobs"+ old_id_obj +" ?pobs"+old_id_obj +" ?oobs"+old_id_obj +" .\n ?sobs"+ old_id_obj +" :hasEnd ?dateEndobs"+ old_id_obj +" .\n ?sobs"+ old_id_obj +" :hasBegin ?dateBeginobs"+ old_id_obj +" .\n" + condition +
        "\n }" , dependances];},
        peg$c69 = function(c1, c2, c3) {

        var condition = " "+c1[0]+ " \n";
        var dependances = [];

        if( c1[1] != null) { dependances.push( c1[1] ); }

        for( w in c2)
        {
          if(c2[w][0] != null){ condition += c2[w][0] + "\n";} 
          if(c2[w][1] != null){ dependances.push(c2[w][1]); }
        }
        for( u in c3)
        {
          if(c3[u][0] != null){ condition += c3[u][0] + "\n";} 
          if(c3[u][1] != null){ dependances.push(c3[w][1]); }
        }

        if(dependances.length == 0) { dependances = null;}

        return [ "SELECT ?sobs"+ id_obj +" ?pobs"+id_obj +" ?oobs"+id_obj +" \nWHERE \n { \n ?sobs"+ id_obj +" ?pobs"+id_obj +" ?oobs"+id_obj +" .\n ?sobs"+ id_obj +" :hasEnd ?dateEndobs"+ id_obj +" .\n ?sobs"+ id_obj +" :hasBegin ?dateBeginobs"+ id_obj +" .\n" + condition +
        "\n }", dependances ];},
        peg$c70 = function(c1) { return [ "?sobs"+(id_obj+act_requete) + c1 +" ." , null]; },
        peg$c71 = function(c1) { return [ c1+" ", null ]; },
        peg$c72 = function(c1) { return [c1+" .", null ]; },
        peg$c73 = function(c1) {  return [ c1+" ", null ];},
        peg$c74 = function(c1) {  return [ c1+" .", null ];},
        peg$c75 = function(c1) { return [ c1+" .", null]; },
        peg$c76 = function(c1) { return c1; },
        peg$c77 = "et",
        peg$c78 = { type: "literal", value: "et", description: "\"et\"" },
        peg$c79 = function(c1) {  return c1; },
        peg$c80 = "de",
        peg$c81 = { type: "literal", value: "de", description: "\"de\"" },
        peg$c82 = "type",
        peg$c83 = { type: "literal", value: "type", description: "\"type\"" },
        peg$c84 = function(id) { return " rdf:type base:"+id.join(""); },
        peg$c85 = "ayant",
        peg$c86 = { type: "literal", value: "ayant", description: "\"ayant\"" },
        peg$c87 = "attribut",
        peg$c88 = { type: "literal", value: "attribut", description: "\"attribut\"" },
        peg$c89 = function(id) { 
        cond_push++;
        return "?sobs" + (id_obj+act_requete) +" model:"+id.join("") +" ?oobs"+(id_obj+act_requete)+id.join(""); 
        },
        peg$c90 = "valeur",
        peg$c91 = { type: "literal", value: "valeur", description: "\"valeur\"" },
        peg$c92 = function(id, val) { 
        cond_push++;
        return "FILTER( ?oobs"+(id_obj+act_requete)+id.join("") + " = "+ val +" ) \n" +
        " ?sobs" + (id_obj+act_requete) +" model:"+id.join("") +" ?oobs"+(id_obj+act_requete)+id.join("") ; 
        },
        peg$c93 = "n",
        peg$c94 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c95 = "'",
        peg$c96 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c97 = "pas",
        peg$c98 = { type: "literal", value: "pas", description: "\"pas\"" },
        peg$c99 = function(id, val) { 
        cond_push++;
        return "FILTER NOT EXISTS { \nFILTER( ?oobs"+(id_obj+act_requete)+id.join("") + " = "+ val +" ) \n" +
        " ?sobs" + (id_obj+act_requete) +" model:"+id.join("") +" ?oobs"+(id_obj+act_requete)+id.join("") + " . \n } " ; 
        },
        peg$c100 = function(val) { 
        cond_push++;
        return "FILTER( ?oobs"+(id_obj+act_requete) + "_" + cond_push + " = "+ val +" ) \n" +
        " ?sobs" + (id_obj+act_requete) + " ?pobs"+(id_obj+act_requete) + "_"+ cond_push +" ?oobs"+(id_obj+act_requete)+ "_"+ cond_push; 
        },
        peg$c101 = function(val) { 
        cond_push++;
        return "FILTER NOT EXISTS { \n FILTER( ?oobs"+(id_obj+act_requete) + "_" + cond_push + " = "+ val +" ) \n" +
        " ?sobs" + (id_obj+act_requete) + " ?pobs"+(id_obj+act_requete) + "_"+ cond_push +" ?oobs"+(id_obj+act_requete)+ "_"+ cond_push + " . \n }"; 
        },
        peg$c102 = function(id) { return id; },
        peg$c103 = /^[0-9]/,
        peg$c104 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c105 = function(id) { return id.join(""); },
        peg$c106 = "\"",
        peg$c107 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c108 = /^[^"\r\n]/,
        peg$c109 = { type: "class", value: "[^\"\\r\\n]", description: "[^\"\\r\\n]" },
        peg$c110 = function(id) {return  '"' +id.join("") + '"' ; },
        peg$c111 = /^[^'\r\n]/,
        peg$c112 = { type: "class", value: "[^'\\r\\n]", description: "[^'\\r\\n]" },
        peg$c113 = function(id) {return  "'" +id.join("") + "'" ; },
        peg$c114 = /^[^\r\n.,0-9]/,
        peg$c115 = { type: "class", value: "[^\\r\\n.,0-9]", description: "[^\\r\\n.,0-9]" },
        peg$c116 = function(id) {return "'"+id.join("").replace(/^\s+/g,'').replace(/\s+$/g,'')+"'"; },
        peg$c117 = "suivi",
        peg$c118 = { type: "literal", value: "suivi", description: "\"suivi\"" },
        peg$c119 = "par",
        peg$c120 = { type: "literal", value: "par", description: "\"par\"" },
        peg$c121 = function(ob, c2) { return " after("+ob+","+"?sobs"+id_obj+") \n" + c2.join("\n") },
        peg$c122 = "pr\xE9c\xE9d\xE9",
        peg$c123 = { type: "literal", value: "pr\xE9c\xE9d\xE9", description: "\"pr\\xE9c\\xE9d\\xE9\"" },
        peg$c124 = function(ob, c2) { return " before("+ob+","+"?sobs"+id_obj+") \n" + c2.join("\n") },
        peg$c125 = "strictement",
        peg$c126 = { type: "literal", value: "strictement", description: "\"strictement\"" },
        peg$c127 = function(ob, c2) { return " predecessor("+ob+","+"?sobs"+id_obj+") \n" + c2.join("\n") },
        peg$c128 = function(ob, c2) { return " successor("+ob+","+"?sobs"+id_obj+") \n" + c2.join("\n") },
        peg$c129 = "pendant",
        peg$c130 = { type: "literal", value: "pendant", description: "\"pendant\"" },
        peg$c131 = function(ob, c2) { return " during("+ob+","+"?sobs"+id_obj+") \n" + c2.join("\n") },
        peg$c132 = /^[element]/,
        peg$c133 = { type: "class", value: "[element]", description: "[element]" },
        peg$c134 = "lui",
        peg$c135 = { type: "literal", value: "lui", description: "\"lui\"" },
        peg$c136 = "m\xEAme",
        peg$c137 = { type: "literal", value: "m\xEAme", description: "\"m\\xEAme\"" },
        peg$c138 = function(c1) {return c1;},
        peg$c139 = "attributs",
        peg$c140 = { type: "literal", value: "attributs", description: "\"attributs\"" },
        peg$c141 = function(id) { return " { ?sobs"+ id_obj + " model:"+id.join("")+" ?oobs"+ id_obj+" . }";},
        peg$c142 = function(id, val) { return " { ?sobs"+ id_obj + " model:"+id.join("")+ " " + val + " . }";},
        peg$c143 = function() {return {  };},
        peg$c144 = /^[.]/,
        peg$c145 = { type: "class", value: "[.]", description: "[.]" },
        peg$c146 = function() {return "";},
        peg$c147 = /^[,]/,
        peg$c148 = { type: "class", value: "[,]", description: "[,]" },
        peg$c149 = function() {return " ";},
        peg$c150 = function() { return " "; },
        peg$c151 = /^[ \n\r\t]/,
        peg$c152 = { type: "class", value: "[ \\n\\r\\t]", description: "[ \\n\\r\\t]" },
        peg$c153 = /^[^'\\\r\n]/,
        peg$c154 = { type: "class", value: "[^'\\\\\\r\\n]", description: "[^'\\\\\\r\\n]" },
        peg$c155 = /^[^ .,\\\r\n\t]/,
        peg$c156 = { type: "class", value: "[^ .,\\\\\\r\\n\\t]", description: "[^ .,\\\\\\r\\n\\t]" },
        peg$c157 = function(id) { return id;},
        peg$c158 = /^[^ \n\t]/,
        peg$c159 = { type: "class", value: "[^ \\n\\t]", description: "[^ \\n\\t]" },
        peg$c160 = function(w) { return ":" + w.join("");},
        peg$c161 = "<",
        peg$c162 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c163 = /^[^<>"{}|\^`\\]/,
        peg$c164 = { type: "class", value: "[^<>\"{}|\\^`\\\\]", description: "[^<>\"{}|\\^`\\\\]" },
        peg$c165 = ">",
        peg$c166 = { type: "literal", value: ">", description: "\">\"" },
        peg$c167 = function(id) { return '<' +id.join("")+ '>'; },
        peg$c168 = /^[ ]/,
        peg$c169 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c170 = function() { return ref},

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseprefix() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsestart();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parserequete();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsestart();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsestart();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserequete();
        if (s1 !== peg$FAILED) {
          s2 = peg$parserequete();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parserequete() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsedebutA();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaction();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenomFin();
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepoint();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c6(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsedebutB();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsedebutC();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseespace();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseaction();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseespace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsepoint();
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parsenomFin() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseespace();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c7) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseespace();
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c9) {
              s4 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c11) {
                  s6 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseespace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseidvalue();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c13(s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedebutA() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c9) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseespace();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c14) {
            s4 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseespace();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c16) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c1;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c9) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseespace();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c18) {
              s4 = peg$c18;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c20();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedebutB() {
      var s0;

      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c21) {
        s0 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parsedebutC() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c9) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseespace();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseespace();
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c11) {
            s4 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidvalue();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c24(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsedebutD() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c25) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseid_name_ref();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c13(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseid_name_ref() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseidvalue();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c27(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseaction() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parserecuperer();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c28(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecompter();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c29(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parserecuperer() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c30) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseespace();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseobjet_condition();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c32(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecompter() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c33) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c35) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c37) {
                s5 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseobsel_condition();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c39(s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseobjet_condition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseobsel_condition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c40(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattribut_condition();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsevaleur_condition();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c29(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseobsel_condition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseconditionOnObsel();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c28(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseall_obsel();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c28(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseone_obsel();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c28(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseall_obsel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
            s3 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c46) {
                s5 = input.substr(peg$currPos, 6);
                peg$currPos += 6;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c48();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseone_obsel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c49) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c51) {
            s3 = peg$c51;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c53();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseconditionOnObsel() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c49) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c54) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c56) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
          }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c51) {
            s3 = peg$c51;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c58.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseespace();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecondListObsel();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c60(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c49) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c54) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c56) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
            }
          }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c5;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c51) {
              s3 = peg$c51;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c52); }
            }
            if (s3 !== peg$FAILED) {
              if (peg$c58.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c5;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseespace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseespace();
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c61();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseobsel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c49) {
          s1 = peg$c49;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 108) {
            s1 = peg$c64;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 100) {
              s1 = peg$c56;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c54) {
                s1 = peg$c54;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c51) {
            s3 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c66();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseobsels() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c49) {
          s1 = peg$c49;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 108) {
            s1 = peg$c64;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c51) {
            s3 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c58.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c67();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondListObsel() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsecondSimpleObsel();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecondSimpleObsel();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecondSimpleObsel();
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parsecondTempObsel();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsecondTempObsel();
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLimitedCondListObsel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecondSimpleObsel();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecondSimpleObsel();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecondSimpleObsel();
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLimitedCondTempObsel();
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c69(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondSimpleObsel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecondTypeObsel();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c70(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecondUnamedValueNonAttribute();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecondUnamedValueAttribute();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c72(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecondPossessAttributeNonEqual();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c73(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecondPossessAttributeEqual();
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c74(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecondPossessAttribute();
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c75(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parseespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseespace();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsevirgule();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseespace();
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsecondSimpleObsel();
                        if (s4 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c76(s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parseespace();
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$parseespace();
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c77) {
                        s2 = peg$c77;
                        peg$currPos += 2;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c78); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseespace();
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseespace();
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsecondSimpleObsel();
                          if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c79(s4);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecondTypeObsel() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c82) {
            s3 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidvalue();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c84(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondPossessAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c85) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c62) {
            s3 = peg$c62;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c49) {
              s3 = peg$c49;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c87) {
                s5 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseidvalue();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseespace();
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c89(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondPossessAttributeEqual() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c85) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c62) {
            s3 = peg$c62;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c49) {
              s3 = peg$c49;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c87) {
                s5 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseidvalue();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
                        s9 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c81); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                            s11 = input.substr(peg$currPos, 6);
                            peg$currPos += 6;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c91); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseespace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseattribute_value();
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c92(s7, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondPossessAttributeNonEqual() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 110) {
        s1 = peg$c93;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c95;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c85) {
                s5 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c86); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c97) {
                    s7 = peg$c97;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c98); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c62) {
                        s9 = peg$c62;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c49) {
                          s9 = peg$c49;
                          peg$currPos += 2;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c87) {
                            s11 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c88); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseespace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseidvalue();
                              if (s13 !== peg$FAILED) {
                                s14 = [];
                                s15 = peg$parseespace();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parseespace();
                                }
                                if (s14 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
                                    s15 = input.substr(peg$currPos, 2);
                                    peg$currPos += 2;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parseespace();
                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parseespace();
                                    }
                                    if (s16 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                                        s17 = input.substr(peg$currPos, 6);
                                        peg$currPos += 6;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s18 = [];
                                        s19 = peg$parseespace();
                                        while (s19 !== peg$FAILED) {
                                          s18.push(s19);
                                          s19 = peg$parseespace();
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s19 = peg$parseattribute_value();
                                          if (s19 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c99(s13, s19);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondUnamedValueAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c85) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c62) {
            s3 = peg$c62;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c49) {
              s3 = peg$c49;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c87) {
                s5 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
                    s7 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                        s9 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseespace();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseattribute_value();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c100(s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecondUnamedValueNonAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 110) {
        s1 = peg$c93;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c95;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c85) {
                s5 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c86); }
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseespace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseespace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c97) {
                    s7 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c98); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseespace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseespace();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c62) {
                        s9 = peg$c62;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c49) {
                          s9 = peg$c49;
                          peg$currPos += 2;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseespace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseespace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c87) {
                            s11 = input.substr(peg$currPos, 8);
                            peg$currPos += 8;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c88); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseespace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseespace();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
                                s13 = input.substr(peg$currPos, 2);
                                peg$currPos += 2;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c81); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = [];
                                s15 = peg$parseespace();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parseespace();
                                }
                                if (s14 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                                    s15 = input.substr(peg$currPos, 6);
                                    peg$currPos += 6;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parseespace();
                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parseespace();
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parseattribute_value();
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c101(s17);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseattribute_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIRIref();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c103.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c103.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
          }
        } else {
          s1 = peg$c1;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c105(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c106;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c107); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c108.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c108.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
              }
            } else {
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c106;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c110(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
              s1 = peg$c95;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c111.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c111.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                }
              } else {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                  s3 = peg$c95;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c96); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c113(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              if (peg$c114.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c115); }
              }
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  if (peg$c114.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c115); }
                  }
                }
              } else {
                s1 = peg$c1;
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c116(s1);
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecondTempObsel() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevirgule();
        if (s2 === peg$FAILED) {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseespace();
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
              s4 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c5;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseespace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseespace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c117) {
                  s6 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c118); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseespace();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                      s8 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c120); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseespace();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseespace();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseobsel();
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseespace();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseespace();
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parsecondSimpleObsel();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parsecondSimpleObsel();
                            }
                            if (s12 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c121(s10, s12);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseespace();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseespace();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevirgule();
          if (s2 === peg$FAILED) {
            s2 = peg$c5;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseespace();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseespace();
            }
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                s4 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c78); }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$c5;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseespace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseespace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c122) {
                    s6 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c123); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseespace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseespace();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                        s8 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c120); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseespace();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseespace();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseobsel();
                          if (s10 !== peg$FAILED) {
                            s11 = [];
                            s12 = peg$parseespace();
                            while (s12 !== peg$FAILED) {
                              s11.push(s12);
                              s12 = peg$parseespace();
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parsecondSimpleObsel();
                              while (s13 !== peg$FAILED) {
                                s12.push(s13);
                                s13 = peg$parsecondSimpleObsel();
                              }
                              if (s12 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c124(s10, s12);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseespace();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseespace();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsevirgule();
            if (s2 === peg$FAILED) {
              s2 = peg$c5;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseespace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseespace();
              }
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                  s4 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$c5;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseespace();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseespace();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {
                      s6 = input.substr(peg$currPos, 11);
                      peg$currPos += 11;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c126); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseespace();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseespace();
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c117) {
                          s8 = input.substr(peg$currPos, 5);
                          peg$currPos += 5;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c118); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$parseespace();
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parseespace();
                          }
                          if (s9 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                              s10 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c120); }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = [];
                              s12 = peg$parseespace();
                              while (s12 !== peg$FAILED) {
                                s11.push(s12);
                                s12 = peg$parseespace();
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parseobsel();
                                if (s12 !== peg$FAILED) {
                                  s13 = [];
                                  s14 = peg$parseespace();
                                  while (s14 !== peg$FAILED) {
                                    s13.push(s14);
                                    s14 = peg$parseespace();
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = [];
                                    s15 = peg$parsecondSimpleObsel();
                                    while (s15 !== peg$FAILED) {
                                      s14.push(s15);
                                      s15 = peg$parsecondSimpleObsel();
                                    }
                                    if (s14 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c127(s12, s14);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseespace();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseespace();
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsevirgule();
              if (s2 === peg$FAILED) {
                s2 = peg$c5;
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseespace();
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parseespace();
                }
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                    s4 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c5;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseespace();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseespace();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c117) {
                        s6 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseespace();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseespace();
                        }
                        if (s7 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {
                            s8 = input.substr(peg$currPos, 11);
                            peg$currPos += 11;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c126); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = [];
                            s10 = peg$parseespace();
                            while (s10 !== peg$FAILED) {
                              s9.push(s10);
                              s10 = peg$parseespace();
                            }
                            if (s9 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                                s10 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c120); }
                              }
                              if (s10 !== peg$FAILED) {
                                s11 = [];
                                s12 = peg$parseespace();
                                while (s12 !== peg$FAILED) {
                                  s11.push(s12);
                                  s12 = peg$parseespace();
                                }
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parseobsel();
                                  if (s12 !== peg$FAILED) {
                                    s13 = [];
                                    s14 = peg$parseespace();
                                    while (s14 !== peg$FAILED) {
                                      s13.push(s14);
                                      s14 = peg$parseespace();
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s14 = [];
                                      s15 = peg$parsecondSimpleObsel();
                                      while (s15 !== peg$FAILED) {
                                        s14.push(s15);
                                        s15 = peg$parsecondSimpleObsel();
                                      }
                                      if (s14 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c127(s12, s14);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseespace();
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseespace();
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsevirgule();
                if (s2 === peg$FAILED) {
                  s2 = peg$c5;
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$parseespace();
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseespace();
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                      s4 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c78); }
                    }
                    if (s4 === peg$FAILED) {
                      s4 = peg$c5;
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseespace();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseespace();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {
                          s6 = input.substr(peg$currPos, 11);
                          peg$currPos += 11;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c126); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parseespace();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parseespace();
                          }
                          if (s7 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c122) {
                              s8 = input.substr(peg$currPos, 7);
                              peg$currPos += 7;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c123); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = [];
                              s10 = peg$parseespace();
                              while (s10 !== peg$FAILED) {
                                s9.push(s10);
                                s10 = peg$parseespace();
                              }
                              if (s9 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                                  s10 = input.substr(peg$currPos, 3);
                                  peg$currPos += 3;
                                } else {
                                  s10 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                }
                                if (s10 !== peg$FAILED) {
                                  s11 = [];
                                  s12 = peg$parseespace();
                                  while (s12 !== peg$FAILED) {
                                    s11.push(s12);
                                    s12 = peg$parseespace();
                                  }
                                  if (s11 !== peg$FAILED) {
                                    s12 = peg$parseobsel();
                                    if (s12 !== peg$FAILED) {
                                      s13 = [];
                                      s14 = peg$parseespace();
                                      while (s14 !== peg$FAILED) {
                                        s13.push(s14);
                                        s14 = peg$parseespace();
                                      }
                                      if (s13 !== peg$FAILED) {
                                        s14 = [];
                                        s15 = peg$parsecondSimpleObsel();
                                        while (s15 !== peg$FAILED) {
                                          s14.push(s15);
                                          s15 = peg$parsecondSimpleObsel();
                                        }
                                        if (s14 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c128(s12, s14);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseespace();
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseespace();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsevirgule();
                  if (s2 === peg$FAILED) {
                    s2 = peg$c5;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseespace();
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$parseespace();
                    }
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                        s4 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c78); }
                      }
                      if (s4 === peg$FAILED) {
                        s4 = peg$c5;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parseespace();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseespace();
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c122) {
                            s6 = input.substr(peg$currPos, 7);
                            peg$currPos += 7;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c123); }
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parseespace();
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parseespace();
                            }
                            if (s7 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {
                                s8 = input.substr(peg$currPos, 11);
                                peg$currPos += 11;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c126); }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = [];
                                s10 = peg$parseespace();
                                while (s10 !== peg$FAILED) {
                                  s9.push(s10);
                                  s10 = peg$parseespace();
                                }
                                if (s9 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c119) {
                                    s10 = input.substr(peg$currPos, 3);
                                    peg$currPos += 3;
                                  } else {
                                    s10 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                  }
                                  if (s10 !== peg$FAILED) {
                                    s11 = [];
                                    s12 = peg$parseespace();
                                    while (s12 !== peg$FAILED) {
                                      s11.push(s12);
                                      s12 = peg$parseespace();
                                    }
                                    if (s11 !== peg$FAILED) {
                                      s12 = peg$parseobsel();
                                      if (s12 !== peg$FAILED) {
                                        s13 = [];
                                        s14 = peg$parseespace();
                                        while (s14 !== peg$FAILED) {
                                          s13.push(s14);
                                          s14 = peg$parseespace();
                                        }
                                        if (s13 !== peg$FAILED) {
                                          s14 = [];
                                          s15 = peg$parsecondSimpleObsel();
                                          while (s15 !== peg$FAILED) {
                                            s14.push(s15);
                                            s15 = peg$parsecondSimpleObsel();
                                          }
                                          if (s14 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c128(s12, s14);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$parseespace();
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseespace();
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsevirgule();
                    if (s2 === peg$FAILED) {
                      s2 = peg$c5;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseespace();
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parseespace();
                      }
                      if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
                          s4 = input.substr(peg$currPos, 2);
                          peg$currPos += 2;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                        if (s4 === peg$FAILED) {
                          s4 = peg$c5;
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = [];
                          s6 = peg$parseespace();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseespace();
                          }
                          if (s5 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c129) {
                              s6 = input.substr(peg$currPos, 7);
                              peg$currPos += 7;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c130); }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = [];
                              s8 = peg$parseespace();
                              while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                s8 = peg$parseespace();
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseobsel();
                                if (s8 !== peg$FAILED) {
                                  s9 = [];
                                  s10 = peg$parseespace();
                                  while (s10 !== peg$FAILED) {
                                    s9.push(s10);
                                    s10 = peg$parseespace();
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s10 = [];
                                    s11 = peg$parsecondSimpleObsel();
                                    while (s11 !== peg$FAILED) {
                                      s10.push(s11);
                                      s11 = peg$parsecondSimpleObsel();
                                    }
                                    if (s10 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c131(s8, s10);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (peg$c132.test(input.charAt(peg$currPos))) {
                      s1 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c133); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c102(s1);
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLimitedCondTempObsel() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c136) {
            s3 = peg$c136;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c137); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecondTempObsel();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c138(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseattribut_condition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseobsel();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseespace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c139) {
              s3 = peg$c139;
              peg$currPos += 9;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseespace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseidvalue();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseespace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseespace();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseidvalue();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseespace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseespace();
                }
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c141(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseespace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseespace();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseidvalue();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseespace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseespace();
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c80) {
                      s5 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c81); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseespace();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseespace();
                      }
                      if (s6 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c90) {
                          s7 = input.substr(peg$currPos, 6);
                          peg$currPos += 6;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c91); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parseespace();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parseespace();
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseattribute_value();
                            if (s9 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c142(s3, s9);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c44) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseespace();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseespace();
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c143();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevaleur_condition() {
      var s0;

      s0 = peg$parseobsel();

      return s0;
    }

    function peg$parsepoint() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c144.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c146();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevirgule() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c147.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c149();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseet() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c77) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c150();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseespace() {
      var s0, s1;

      s0 = [];
      if (peg$c151.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c151.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c152); }
          }
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsestringvalue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c153.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c153.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseidvalue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c155.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c155.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesparqlvaleur();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c157(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c158.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c158.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c159); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c160(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesparqlvaleur() {
      var s0;

      s0 = peg$parseIRIref();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRDFLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseBlankNode();
              if (s0 === peg$FAILED) {
                s0 = peg$parseNIL();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIRIref() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c161;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c163.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c164); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c163.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c164); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c165;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c166); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c167(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRDFLiteral() {
      var s0;

      s0 = [];

      return s0;
    }

    function peg$parseNumericLiteral() {
      var s0;

      s0 = [];

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0;

      s0 = [];

      return s0;
    }

    function peg$parseBlankNode() {
      var s0;

      s0 = [];

      return s0;
    }

    function peg$parseNIL() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c168.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c170();
      }
      s0 = s1;

      return s0;
    }


     // id_req est utilis√© pour faire l'id de la requete (qui est une chaine de caract√®res)
      var id_req =0;

      var id_obj = 0;
      var old_id_obj = id_obj;

      // Je garde le num√©ro id_obj que je veux r√©cup√©rer via la requ√™te
      var act_requete = 0;

      // Pour les multiples conditions, permet de savoir combien on a fait
      // de sous conditions obsel.
      var cond_push = 0;

      //pour les pr√©fixes des attributs. Pour le moment, on utilise base 
      //comme pr√©fixe de tout les attributs
      var trace_baseURI = "";

      //http://dsi-liris-silex.univ-lyon1.fr/m2ia/ktbs/ap-mm-base-default/trace-default/@obsels
      //Je pique votre base, Antoine, Ma√´l :p J'en ai besoin pour mes test..
      //var trace_modelURI = "<http://dsi-liris-silex.univ-lyon1.fr/m2ia/ktbs/ap-mm-base-default/trace-model-default/>";
      var trace_modelURI = "<http://liris.cnrs.fr/silex/2011/simple-trace-model/>"

      // Fonction qui s'occupe de compresser toutes les requetes
      function concat_all_request( request_list, num)
      { 
         chaine = " ";
     
         if(request_list[num][3] == null)
         {
            return request_list[num][2];
         }
         return request_list[num][2];
         
        
         // Si les d√©pendances ne sont pas nulles, il faut rechercher dans la liste des 
         // requ√™tes l'ensemble des √©l√©ments
         for(ak in request_list)
           {
               chaine += concat_one_request();
           }

      }




    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
